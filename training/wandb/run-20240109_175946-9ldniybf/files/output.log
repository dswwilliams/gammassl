xFormers not available
xFormers not available
  0%|                                                                                                                                 | 0/1 [00:00<?, ?it/s]
Device:  cpu
relative_upsample_factors [1.0, 2.0, 2.0]
relative_downsample_factors [2]
384
No. of training examples per epoch: 44
No. of iterations per epoch: 2.0
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_dict:  dict_keys(['box_A', 'img', 'label'])
raw_dict:  dict_keys(['img_1', 'img_2', 'box_A', 'box_B'])
labelled_imgs shape: torch.Size([24, 3, 224, 224])
  0%|                                                                                                                                 | 0/1 [00:06<?, ?it/s]
Traceback (most recent call last):
  File "/Users/dw/code/pytorch/gammassl_public/training/train.py", line 175, in <module>
    trainer.train()
  File "/Users/dw/code/pytorch/gammassl_public/training/../training/base_trainer.py", line 196, in train
    losses, metrics = self._train_models(labelled_dict, raw_dict)
  File "/Users/dw/code/pytorch/gammassl_public/training/gammassl_trainer.py", line 42, in _train_models
    prototypes = self.model.calculate_batch_prototypes()
  File "/Users/dw/code/pytorch/gammassl_public/training/../models/model.py", line 331, in calculate_batch_prototypes
    prototypes = self.extract_prototypes(labelled_features_A, low_res_labels_A, output_metrics=False)
  File "/Users/dw/miniconda3/envs/dinov2/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/dw/code/pytorch/gammassl_public/training/../utils/hypersphere_prototype_utils.py", line 30, in forward
    labels = labels.reshape(bs*h*w)                # shape: [bs*h*w]
RuntimeError: shape '[98304]' is invalid for input of size 393216
labelled_features_A.shape: torch.Size([24, 256, 64, 64])
low_res_labels_A shape: torch.Size([24, 128, 128]), labelled_features_A shape: torch.Size([24, 256, 64, 64])